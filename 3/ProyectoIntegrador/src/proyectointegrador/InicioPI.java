/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectointegrador;

import Global.VariableGlobal;
import cripto.*;
import VarianteAlejandra.*;
import VarianteAlvaro.ProcessVariantAlvaro;
import VarianteFabian.ProcessVariantFabian;
import java.awt.HeadlessException;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Alexander
 */
public class InicioPI extends javax.swing.JFrame {

    /**
     * Creates new form Inicio
     */
    private static boolean use = true, use2 = true;
    public static JFileChooser jfile = new JFileChooser();
    private BufferedReader br;
    private String lectura = "";
    private File f;
    ArrayList<Long> listaC = new ArrayList<>();
    public static PrintWriter salida = null;
    
    
    public InicioPI() throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        initComponents();
        
        jTextArea_cifrar.setLineWrap(true);
        jTextArea_cifrar.setWrapStyleWord(true);
        jTextArea_descifrar.setLineWrap(true);
        jTextArea_descifrar.setWrapStyleWord(true);
        JOptionPane.showMessageDialog(null, "antes de empezar a cifrar o descifrar, dele clic en el cuadro para borrar el mensaje");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jTabbedPane_contenedor = new javax.swing.JTabbedPane();
        jScrollPane_cifrar = new javax.swing.JScrollPane();
        jTextArea_cifrar = new javax.swing.JTextArea();
        jScrollPane_descifrar = new javax.swing.JScrollPane();
        jTextArea_descifrar = new javax.swing.JTextArea();
        jPasswordField_llave = new javax.swing.JPasswordField();
        jButtom_ejecutar = new javax.swing.JButton();
        jButton1_limpiar = new javax.swing.JButton();
        jLabel_llave = new javax.swing.JLabel();
        jComboBox_opciones = new javax.swing.JComboBox();
        jMenuBar_principal = new javax.swing.JMenuBar();
        jMenu_archivo = new javax.swing.JMenu();
        jMenuItem_cifrar = new javax.swing.JMenuItem();
        jMenuItem_descifrar = new javax.swing.JMenuItem();
        jMenuItem_descifrarTDes = new javax.swing.JMenuItem();
        jMenuItem_guardar = new javax.swing.JMenuItem();
        jMenuItem_exit = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();

        jMenu1.setText("jMenu1");

        jMenu2.setText("File");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");
        jMenuBar1.add(jMenu3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cryptography");

        jTextArea_cifrar.setColumns(20);
        jTextArea_cifrar.setRows(5);
        jTextArea_cifrar.setText("Ingresar el texto a cifrar");
        jTextArea_cifrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea_cifrarMouseClicked(evt);
            }
        });
        jTextArea_cifrar.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTextArea_cifrarComponentShown(evt);
            }
        });
        jScrollPane_cifrar.setViewportView(jTextArea_cifrar);

        jTabbedPane_contenedor.addTab("Cipher", jScrollPane_cifrar);

        jTextArea_descifrar.setColumns(20);
        jTextArea_descifrar.setRows(5);
        jTextArea_descifrar.setText("Ingresar el texto a Descifrar");
        jTextArea_descifrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea_descifrarMouseClicked(evt);
            }
        });
        jScrollPane_descifrar.setViewportView(jTextArea_descifrar);

        jTabbedPane_contenedor.addTab("Decipher", jScrollPane_descifrar);

        jButtom_ejecutar.setText("Excecute");
        jButtom_ejecutar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtom_ejecutarMouseClicked(evt);
            }
        });

        jButton1_limpiar.setText("Clean");
        jButton1_limpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1_limpiarMouseClicked(evt);
            }
        });

        jLabel_llave.setText("Por favor ingrese su llave para poder iniciar el proceso");

        jComboBox_opciones.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DES", "T-DES", "DICCIONARIO", "2DES", "NOVENANTEDES" }));

        jMenu_archivo.setText("File");

        jMenuItem_cifrar.setText("Open Cipher");
        jMenuItem_cifrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem_cifrarMouseClicked(evt);
            }
        });
        jMenuItem_cifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_cifrarActionPerformed(evt);
            }
        });
        jMenu_archivo.add(jMenuItem_cifrar);

        jMenuItem_descifrar.setText("Open Decipher");
        jMenuItem_descifrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_descifrarActionPerformed(evt);
            }
        });
        jMenu_archivo.add(jMenuItem_descifrar);

        jMenuItem_descifrarTDes.setText("Open Decipher TDES");
        jMenuItem_descifrarTDes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_descifrarTDesActionPerformed(evt);
            }
        });
        jMenu_archivo.add(jMenuItem_descifrarTDes);

        jMenuItem_guardar.setText("Save");
        jMenuItem_guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem_guardarMouseClicked(evt);
            }
        });
        jMenuItem_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_guardarActionPerformed(evt);
            }
        });
        jMenu_archivo.add(jMenuItem_guardar);

        jMenuItem_exit.setText("Exit");
        jMenuItem_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_exitActionPerformed(evt);
            }
        });
        jMenu_archivo.add(jMenuItem_exit);

        jMenuBar_principal.add(jMenu_archivo);

        jMenu_Help.setText("Help");
        jMenu_Help.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu_HelpMouseClicked(evt);
            }
        });
        jMenuBar_principal.add(jMenu_Help);

        setJMenuBar(jMenuBar_principal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel_llave, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPasswordField_llave, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane_contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox_opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtom_ejecutar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1_limpiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane_contenedor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jComboBox_opciones, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jButtom_ejecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1_limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(134, 134, 134)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPasswordField_llave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_llave))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem_cifrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_cifrarMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jMenuItem_cifrarMouseClicked

    private void jMenuItem_cifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_cifrarActionPerformed
        // TODO add your handling code here:
        jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int seleccion = jfile.showOpenDialog(null);
        switch(seleccion)
        {
            case 0:
            {
                try
                {
                    jTextArea_cifrar.setText("");
                    f = jfile.getSelectedFile();
                    br = new BufferedReader(new FileReader(f));
                    do
                    {
                        lectura = br.readLine();
                        jTextArea_cifrar.append(lectura + "\n");
                    } while (br.ready());

                    break;
                }
                catch (FileNotFoundException ex)
                {
                    System.out.println(ex);
                }
                catch (IOException ex)
                {
                    System.out.println(ex);
                }
            }
            case 1:
            {
                f = null;
                break;
            }
            default:
            {
                break;
            }
        }
    }//GEN-LAST:event_jMenuItem_cifrarActionPerformed

    private void jMenuItem_guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem_guardarMouseClicked

        int index = jTabbedPane_contenedor.getSelectedIndex();
        switch (index)
        {
            case 0:
            {
                jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int seleccion = jfile.showOpenDialog(null);
                switch(seleccion)
                {
                    case 0:
                    {
                        try
                        {
                            f = jfile.getSelectedFile();
                            salida = new PrintWriter(new BufferedWriter(new FileWriter(f)));
                            salida.println(jTextArea_cifrar.getText());
                            salida.flush();
                            salida.close();
                            break;
                        }
                        catch (Exception ex)
                        {
                            System.out.println(ex);
                        }
                    }
                    case 1:
                    {
                        f = null;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                break;
            }
            case 1:
            {
                jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int seleccion = jfile.showOpenDialog(null);
                switch(seleccion)
                {
                    case 0:
                    {
                        try
                        {
                            f = jfile.getSelectedFile();
                            salida = new PrintWriter(new BufferedWriter(new FileWriter(f)));
                            salida.println(jTextArea_descifrar.getText());
                            salida.flush();
                            salida.close();
                            break;
                        }
                        catch (Exception ex)
                        {
                            System.out.println(ex);
                        }
                    }
                    case 1:
                    {
                        f = null;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_jMenuItem_guardarMouseClicked

    private void jMenuItem_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_guardarActionPerformed
        // TODO add your handling code here:
        int index = jTabbedPane_contenedor.getSelectedIndex();
        switch (index)
        {
            case 0:
            {
                jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                jfile.setName("Guardar");
                int seleccion = jfile.showSaveDialog(null);
                switch(seleccion)
                {
                    case 0:
                    {
                        try
                        {
                            f = jfile.getSelectedFile();
                            salida = new PrintWriter(new BufferedWriter(new FileWriter(f)));
                            String[] temp = jTextArea_cifrar.getText().split("\n");
                            for (String l : temp)
                            {
                                salida.println(l);
                            }
                            salida.flush();
                            salida.close();
                            JOptionPane.showMessageDialog(null, "OK");
                            break;
                        }
                        catch (IOException | HeadlessException ex)
                        {
                            System.out.println(ex);
                        }
                    }
                    case 1:
                    {
                        f = null;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                break;
            }
            case 1:
            {
                jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
                int seleccion = jfile.showOpenDialog(null);
                switch(seleccion)
                {
                    case 0:
                    {
                        try
                        {
                            f = jfile.getSelectedFile();
                            salida = new PrintWriter(new BufferedWriter(new FileWriter(f)));
                            salida.println(jTextArea_descifrar.getText());
                            salida.flush();
                            salida.close();
                            break;
                        }
                        catch (Exception ex)
                        {
                            System.out.println(ex);
                        }
                    }
                    case 1:
                    {
                        f = null;
                        break;
                    }
                    default:
                    {
                        break;
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_jMenuItem_guardarActionPerformed

    private void jTextArea_cifrarComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTextArea_cifrarComponentShown
        // TODO add your handling code here:
        jTextArea_cifrar.setAutoscrolls(true);
    }//GEN-LAST:event_jTextArea_cifrarComponentShown

    private void jButtom_ejecutarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtom_ejecutarMouseClicked
        try 
        {
            VariableGlobal.salida = new PrintWriter(new BufferedWriter(new FileWriter("Tiempos.txt", true)));
            int opcionCifrado = jComboBox_opciones.getSelectedIndex();
            switch (opcionCifrado)
            {
                case 0:
                {
                    int op = jTabbedPane_contenedor.getSelectedIndex();
                    switch(op)
                    {
                        case 0:
                        {
                            try
                            {
                                if (validacion(jPasswordField_llave))
                                {
                                    DES des = new DES(new Key(VariableGlobal.valorKey(new String(jPasswordField_llave.getPassword()).trim().getBytes())));
                                    double t1 = System.nanoTime();
                                    System.out.println("Tamaño texto: " + jTextArea_cifrar.getText().length());
//                                    VariableGlobal.salida.println("Tamaño texto: " + jTextArea_cifrar.getText().length());
                                    for(byte caracter : jTextArea_cifrar.getText().getBytes())
                                    {
                                        Long temp = des.encryptBlock(caracter);
                                        listaC.add(temp);
                                    }
                                    double t2 = System.nanoTime();
                                    double tr2 = (t2 - t1) * Math.pow(10, -9);
                                    System.out.println("Tiempo Estimado Cifrado Original: " + tr2 + " segundos");
                                    VariableGlobal.salida.println("Tiempo Estimado Cifrado Original: " + tr2 + " segundos");
                                    jTextArea_cifrar.setText("");
                                    for (Long l : listaC)
                                    {
                                        jTextArea_cifrar.append(l + "\n");
                                    }
                                    jPasswordField_llave.setText("");
                                    VariableGlobal.salida.flush();
                                    VariableGlobal.salida.close();
                                    listaC.clear();
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "Ingrese una llave que cumpla con los requisitos:\n - contener minimo un numero\n - letra minuscula\n - algun caracter especial\n - letras mayusculas\n - minimo de 8 caracteres");
                                }
                            }
                            catch (Exception ex)
                            {
                                System.out.println(ex);
                            }
                            finally
                            {
                                break;
                            }
                        }
                        case 1:
                        {
                            try
                            {
                                DES des = new DES(new Key(VariableGlobal.valorKey(new String(jPasswordField_llave.getPassword()).trim().getBytes())));
                                ArrayList<String> listaD = new ArrayList<>();
                                double t1 = System.nanoTime();
                                for (String string : jTextArea_descifrar.getText().split("\n"))
                                {
                                    char ch = (char)des.decryptBlock(Long.parseLong(string.trim()));
                                    listaD.add(String.valueOf(ch));
                                }
                                double t2 = System.nanoTime();
                                double tr2 = (t2 - t1) * Math.pow(10, -9);
                                System.out.println("Tiempo Estimado Descifrado Original: " + tr2 + " segundos");
                                VariableGlobal.salida.println("Tiempo Estimado Descifrado Original: " + tr2 + " segundos");
                                jTextArea_descifrar.setText("");
                                for (String string : listaD)
                                {
                                    jTextArea_descifrar.append(string);
                                }
                                jPasswordField_llave.setText("");
                                VariableGlobal.salida.flush();
                                VariableGlobal.salida.close();
                                listaD.clear();
                            }
                            catch (Exception ex)
                            {
                                System.out.println(ex);
                            }
                            finally
                            {
                                break;
                            }
                        }
                    }
                    break;
                }
                case 1:
                {
                    int op = jTabbedPane_contenedor.getSelectedIndex();
                    try
                    {
                        TripleDES tDES = new TripleDES();
                        if(validacion(jPasswordField_llave))
                        {
                            tDES.setMyEncryptionKey(new String(jPasswordField_llave.getPassword()));
                            tDES.stablishKey();
                            switch (op)
                            {
                                case 0:
                                {
                                    double t1 = System.nanoTime();
                                    String encrypted = tDES.encrypt(jTextArea_cifrar.getText());
                                    double t2 = System.nanoTime();
                                    double tr2 = (t2 - t1) * Math.pow(10, -9);
                                    System.out.println("Tiempo Estimado Cifrado Triple-DES: " + tr2 + " segundos");
                                    VariableGlobal.salida.println("Tiempo Estimado Cifrado Triple-DES: " + tr2 + " segundos");
                                    VariableGlobal.salida.flush();
                                    VariableGlobal.salida.close();
                                    jTextArea_cifrar.setText("");
                                    jTextArea_cifrar.setText(encrypted);
                                    jPasswordField_llave.setText("");
                                    break;
                                }
                                case 1:
                                {
                                    double t1 = System.nanoTime();
                                    String decrypted = tDES.decrypt(jTextArea_descifrar.getText());
                                    double t2 = System.nanoTime();
                                    double tr2 = (t2 - t1) * Math.pow(10, -9);
                                    System.out.println("Tiempo Estimado Descifrado Triple-DES: " + tr2 + " segundos");
                                    VariableGlobal.salida.println("Tiempo Estimado Descifrado Triple-DES: " + tr2 + " segundos");
                                    VariableGlobal.salida.flush();
                                    VariableGlobal.salida.close();
                                    jTextArea_descifrar.setText("");
                                    jTextArea_descifrar.setText(decrypted);
                                    jPasswordField_llave.setText("");
                                    break;
                                }
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(null, "Ingrese una llave que cumpla con los requisitos:\n - contener minimo un numero\n - letra minuscula\n - algun caracter especial\n - letras mayusculas\n - minimo de 24 caracteres");
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                        System.out.println(ex);
                    }
                    finally
                    {
                        break;
                    }
                }
                case 2:
                {
                    int op = jTabbedPane_contenedor.getSelectedIndex();
                    switch(op)
                    {
                        case 0:
                        {
                            try
                            {
                                if (validacion(jPasswordField_llave))
                                {
                                    ProcessVariantAlvaro.setDes(new DES(new Key(VariableGlobal.valorKey(new String(jPasswordField_llave.getPassword()).trim().getBytes()))));
                                    ProcessVariantAlvaro.cifrado(jTextArea_cifrar);
                                    jPasswordField_llave.setText("");
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(null, "Ingrese una llave que cumpla con los requisitos:\n - contener minimo un numero\n - letra minuscula\n - algun caracter especial\n - letras mayusculas\n - minimo de 8 caracteres");
                                }
                            }
                            catch (Exception ex)
                            {
                                System.out.println(ex);
                            }
                            finally
                            {
                                break;
                            }
                        }
                        case 1:
                        {
                            try
                            {
                                ProcessVariantAlvaro.setDes(new DES(new Key(VariableGlobal.valorKey(new String(jPasswordField_llave.getPassword()).trim().getBytes()))));
                                ProcessVariantAlvaro.descifrado(jTextArea_descifrar);
                                jPasswordField_llave.setText("");
                            }
                            catch (Exception ex)
                            {
                                System.out.println(ex);
                            }
                            finally
                            {
                                break;
                            }
                        }
                    }
                    break;
                }
                case 3:
                {
                    int op = jTabbedPane_contenedor.getSelectedIndex();
                    switch(op)
                    {
                        case 0:
                        {
                            if (validacion(jPasswordField_llave)) //da un mayor nivel de seguridad en el algoritmo.
                            {
                                ProcessVariantAleja.setVarAleja(new DESAlejandra(new Key(VariableGlobal.valorKey(new String(jPasswordField_llave.getPassword()).getBytes())), 32)); //se instancia la clase, que requiere 2 parametros, uno es la llave, la cual, primero se obtiene del campo llave, luego se transforma a decimal, posteriormente se halla la sumatoria de ese arreglo de bytes para asignarlo como la llave y por ultimo se le indica el numero de rondas.
                                ProcessVariantAleja.cifrado(jTextArea_cifrar);
                                jPasswordField_llave.setText("");
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "Ingrese una llave que cumpla con los requisitos:\n - contener minimo un numero\n - letra minuscula\n - algun caracter especial\n - letras mayusculas\n - minimo de 16 caracteres");
                            }
                            break;
                        }
                        case 1:
                        {
                            ProcessVariantAleja.setVarAleja(new DESAlejandra(new Key(VariableGlobal.valorKey(new String(jPasswordField_llave.getPassword()).getBytes())), 32)); //se instancia la clase, que requiere 2 parametros, uno es la llave, la cual, primero se obtiene del campo llave, luego se transforma a decimal, posteriormente se halla la sumatoria de ese arreglo de bytes para asignarlo como la llave y por ultimo se le indica el numero de rondas.
                            ProcessVariantAleja.descifrado(jTextArea_descifrar);
                            jPasswordField_llave.setText("");
                            break;
                        }
                    }
                    break;
                }
                case 4:
                {
                    int op = jTabbedPane_contenedor.getSelectedIndex();
                    switch(op)
                    {
                        case 0:
                        {
                            ProcessVariantFabian.cifrado(jTextArea_cifrar, jPasswordField_llave);
                            break;
                        }
                        case 1:
                        {
                            ProcessVariantFabian.descifrado(jTextArea_descifrar, jPasswordField_llave);
                            break;
                        }
                    }
                    break;
                }
            }
        } 
        catch (IOException ex) 
        {
            System.out.println(ex);
        }
        
        
    }//GEN-LAST:event_jButtom_ejecutarMouseClicked

    public boolean validacion(JPasswordField jpasswordfield)
    {
        
        switch(jComboBox_opciones.getSelectedIndex())
        {
            case 0:
            {
                VariableGlobal.setPatron(Pattern.compile("(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%/]).{8,30}"));
                break;
            }
            case 1:
            {
                VariableGlobal.setPatron(Pattern.compile("(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%/]).{24,30}"));
                break;
            }
            case 2:
            {
                VariableGlobal.setPatron(Pattern.compile("(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%/]).{8,30}"));
                break;
            }
            case 3:
            {
                VariableGlobal.setPatron(Pattern.compile("(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%/]).{16,30}"));
                break;
            }
            case 4:
            {
                break;
            }
        }
        Matcher matcher = VariableGlobal.getPatron().matcher(new String(jpasswordfield.getPassword()));
        return  matcher.matches();
    }
    
    private void jButton1_limpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1_limpiarMouseClicked
        // TODO add your handling code here:
        switch(jTabbedPane_contenedor.getSelectedIndex())
        {
            case 0:
            {
                jTextArea_cifrar.setText("");
                break;
            }
            case 1:
            {
                jTextArea_descifrar.setText("");
                break;
            }
            default:
            {
                break;
            }
        }
    }//GEN-LAST:event_jButton1_limpiarMouseClicked

    private void jTextArea_cifrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea_cifrarMouseClicked
        if (use) 
        {
            jTextArea_cifrar.setText("");
            use = false;
        }
    }//GEN-LAST:event_jTextArea_cifrarMouseClicked

    private void jTextArea_descifrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea_descifrarMouseClicked
        if (use2)
        {
            jTextArea_descifrar.setText("");
            use2 = false;
        }
    }//GEN-LAST:event_jTextArea_descifrarMouseClicked

    private void jMenuItem_descifrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_descifrarActionPerformed
        // TODO add your handling code here:
         jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int seleccion = jfile.showOpenDialog(null);
        switch(seleccion)
        {
            case 0:
            {
                try
                {
                    jTextArea_descifrar.setText("");
                    f = jfile.getSelectedFile();
                    br = new BufferedReader(new FileReader(f));
                    do
                    {
                        lectura = br.readLine();
                        jTextArea_descifrar.append(lectura + "\n");
                    } while (br.ready());

                    break;
                }
                catch (FileNotFoundException ex)
                {
                    Logger.getLogger(InicioPI.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (IOException ex)
                {
                    Logger.getLogger(InicioPI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            case 1:
            {
                f = null;
                break;
            }
            default:
            {
                break;
            }
        }
        
    }//GEN-LAST:event_jMenuItem_descifrarActionPerformed

    private void jMenu_HelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu_HelpMouseClicked
        // TODO add your handling code here:
        new Help().setVisible(true);
    }//GEN-LAST:event_jMenu_HelpMouseClicked

    private void jMenuItem_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0b0);
    }//GEN-LAST:event_jMenuItem_exitActionPerformed

    private void jMenuItem_descifrarTDesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_descifrarTDesActionPerformed
        jfile.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int seleccion = jfile.showOpenDialog(null);
        switch(seleccion)
        {
            case 0:
            {
                try
                {
                    jTextArea_descifrar.setText("");
                    f = jfile.getSelectedFile();
                    br = new BufferedReader(new FileReader(f));
                    do
                    {
                        lectura = br.readLine();
                        jTextArea_descifrar.append(lectura);
                    } while (br.ready());

                    break;
                }
                catch (FileNotFoundException ex)
                {
                    System.out.println(ex);
                }
                catch (IOException ex)
                {
                    System.out.println(ex);
                }
            }
            case 1:
            {
                f = null;
                break;
            }
            default:
            {
                break;
            }
        }
    }//GEN-LAST:event_jMenuItem_descifrarTDesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InicioPI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new InicioPI().setVisible(true);
                } catch (        ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(InicioPI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtom_ejecutar;
    private javax.swing.JButton jButton1_limpiar;
    private javax.swing.JComboBox jComboBox_opciones;
    private javax.swing.JLabel jLabel_llave;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar_principal;
    private javax.swing.JMenuItem jMenuItem_cifrar;
    private javax.swing.JMenuItem jMenuItem_descifrar;
    private javax.swing.JMenuItem jMenuItem_descifrarTDes;
    private javax.swing.JMenuItem jMenuItem_exit;
    private javax.swing.JMenuItem jMenuItem_guardar;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JMenu jMenu_archivo;
    private javax.swing.JPasswordField jPasswordField_llave;
    private javax.swing.JScrollPane jScrollPane_cifrar;
    private javax.swing.JScrollPane jScrollPane_descifrar;
    private javax.swing.JTabbedPane jTabbedPane_contenedor;
    private javax.swing.JTextArea jTextArea_cifrar;
    private javax.swing.JTextArea jTextArea_descifrar;
    // End of variables declaration//GEN-END:variables
}
